{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAILED, SIGNUP_FAILED, SIGNUP_SUCCESS, AUTHENTICATION_SUCCESS, AUTHENTICATION_FAILED, LOGOUT_USER } from \"./actions.types\";\nimport axios from \"axios\";\nexport const login = (username, email, password) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = {\n    username,\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"api/userModel/login\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    console.log(\"used logged in\");\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAILED\n    });\n  }\n};\nexport const signup = (username, email, password) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = {\n    username,\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"api/userModel/register\", body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    console.log(\"user created\");\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAILED\n    });\n  }\n};\nexport const check_authenticated = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const tokenCheck = {\n      token: localStorage.getItem(\"access\")\n    };\n\n    try {\n      if (tokenCheck.token != null) {\n        dispatch({\n          type: AUTHENTICATION_SUCCESS,\n          payload: tokenCheck\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATION_FAILED\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATION_FAILED\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};","map":{"version":3,"sources":["/home/tb2/youtube/myprojects/careeroptions/career-master/src/actions/actions.auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAILED","SIGNUP_FAILED","SIGNUP_SUCCESS","AUTHENTICATION_SUCCESS","AUTHENTICATION_FAILED","LOGOUT_USER","axios","login","username","email","password","dispatch","config","header","body","res","post","type","payload","data","console","log","err","signup","check_authenticated","localStorage","getItem","tokenCheck","token","logout"],"mappings":"AAAA,SACEA,aADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,sBALF,EAMEC,qBANF,EAOEC,WAPF,QAQO,iBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B,MAAOC,QAAP,IAAoB;AACtE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE;AACN,sBAAgB;AADV;AADK,GAAf;AAMA,QAAMC,IAAI,GAAG;AAAEN,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAb;;AAEA,MAAI;AACF,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,qBAAX,EAAkCF,IAAlC,EAAwCF,MAAxC,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAElB,aADC;AAEPmB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAGD;AACF,CAtBM;AAwBP,OAAO,MAAMuB,MAAM,GAAG,CAACf,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B,MAAOC,QAAP,IAAoB;AACvE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE;AACN,sBAAgB;AADV;AADK,GAAf;AAMA,QAAMC,IAAI,GAAG;AAAEN,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAb;;AAEA,MAAI;AACF,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,wBAAX,EAAqCF,IAArC,EAA2CF,MAA3C,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEf,cADC;AAEPgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD;AACF,CArBM;AAuBP,OAAO,MAAMuB,mBAAmB,GAAG,MAAM,MAAOb,QAAP,IAAoB;AAC3D,MAAIc,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAJ,EAAoC;AAClC,UAAMC,UAAU,GAAG;AAAEC,MAAAA,KAAK,EAAEH,YAAY,CAACC,OAAb,CAAqB,QAArB;AAAT,KAAnB;;AAEA,QAAI;AACF,UAAIC,UAAU,CAACC,KAAX,IAAoB,IAAxB,EAA8B;AAC5BjB,QAAAA,QAAQ,CAAC;AACPM,UAAAA,IAAI,EAAEd,sBADC;AAEPe,UAAAA,OAAO,EAAES;AAFF,SAAD,CAAR;AAID;AACF,KAPD,CAOE,OAAOL,GAAP,EAAY;AACZX,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEb;AADC,OAAD,CAAR;AAGD;AACF,GAfD,MAeO;AACLO,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CArBM;AAuBP,OAAO,MAAMyB,MAAM,GAAG,MAAOlB,QAAD,IAAc;AACxCA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGD,CAJM","sourcesContent":["import {\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  SIGNUP_FAILED,\n  SIGNUP_SUCCESS,\n  AUTHENTICATION_SUCCESS,\n  AUTHENTICATION_FAILED,\n  LOGOUT_USER,\n} from \"./actions.types\";\nimport axios from \"axios\";\n\nexport const login = (username, email, password) => async (dispatch) => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = { username, email, password };\n\n  try {\n    const res = await axios.post(\"api/userModel/login\", body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    console.log(\"used logged in\");\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAILED,\n    });\n  }\n};\n\nexport const signup = (username, email, password) => async (dispatch) => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = { username, email, password };\n\n  try {\n    const res = await axios.post(\"api/userModel/register\", body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data,\n    });\n    console.log(\"user created\");\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAILED,\n    });\n  }\n};\n\nexport const check_authenticated = () => async (dispatch) => {\n  if (localStorage.getItem(\"access\")) {\n    const tokenCheck = { token: localStorage.getItem(\"access\") };\n\n    try {\n      if (tokenCheck.token != null) {\n        dispatch({\n          type: AUTHENTICATION_SUCCESS,\n          payload: tokenCheck,\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATION_FAILED,\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATION_FAILED,\n    });\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: LOGOUT_USER,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}