{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAILED, SIGNUP_FAILED, SIGNUP_SUCCESS, AUTHENTICATION_SUCCESS, AUTHENTICATION_FAILED, LOGOUT_USER } from './actions.types';\nimport axios from 'axios';\nexport const login = (username, email, password) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": 'application/json'\n    }\n  };\n  const body = {\n    username,\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"api/userModel/login\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    console.log(\"used logged in\");\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAILED\n    });\n  }\n};\nexport const signup = (username, email, password) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = {\n    username,\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"api/userModel/register\", body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    console.log(\"user created\");\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAILED\n    });\n  }\n};\nexport const check_authenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const tokenCheck = {\n      token: localStorage.getItem('access')\n    };\n\n    try {\n      if (tokenCheck.token != null) {\n        dispatch({\n          type: AUTHENTICATION_SUCCESS,\n          payload: tokenCheck\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATION_FAILED\n      });\n    }\n  } else {\n    dispatch;\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};","map":{"version":3,"sources":["/home/tb2/youtube/myprojects/careeroptions/career-master/src/actions/actions.auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAILED","SIGNUP_FAILED","SIGNUP_SUCCESS","AUTHENTICATION_SUCCESS","AUTHENTICATION_FAILED","LOGOUT_USER","axios","login","username","email","password","dispatch","config","header","body","res","post","type","payload","data","console","log","err","signup","check_authenticated","localStorage","getItem","tokenCheck","token","logout"],"mappings":"AAAA,SACIA,aADJ,EACkBC,YADlB,EAC+BC,aAD/B,EAC6CC,cAD7C,EAC4DC,sBAD5D,EACmFC,qBADnF,EACyGC,WADzG,QAEO,iBAFP;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAC,CAACC,QAAD,EAAUC,KAAV,EAAgBC,QAAhB,KAA6B,MAAOC,QAAP,IAAoB;AAChE,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE;AACJ,sBAAiB;AADb;AADG,GAAf;AAMA,QAAMC,IAAI,GAAG;AAACN,IAAAA,QAAD;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,GAAb;;AAEA,MAAI;AACA,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CACd,qBADc,EAEdF,IAFc,EAGdF,MAHc,CAAlB;AAMAD,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,GAZD,CAaA,OAAOC,GAAP,EAAY;AACRX,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAACjB;AADA,KAAD,CAAR;AAGH;AACJ,CA3BM;AA6BP,OAAO,MAAMuB,MAAM,GAAI,CAACf,QAAD,EAAUC,KAAV,EAAgBC,QAAhB,KAA6B,MAAOC,QAAP,IAAoB;AACpE,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE;AACJ,sBAAiB;AADb;AADG,GAAf;AAMA,QAAMC,IAAI,GAAG;AAAEN,IAAAA,QAAF;AAAWC,IAAAA,KAAX;AAAiBC,IAAAA;AAAjB,GAAb;;AAEA,MAAG;AACC,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,wBAAX,EAAoCF,IAApC,EAAyCF,MAAzC,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEf,cADD;AAELgB,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEH,GARD,CAQE,OAAOC,GAAP,EAAY;AACVX,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEhB;AADD,KAAD,CAAR;AAGH;AAEJ,CAvBM;AAyBP,OAAO,MAAMuB,mBAAmB,GAAG,MAAM,MAAOb,QAAP,IAAoB;AACzD,MAAGc,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAH,EAAkC;AAC9B,UAAMC,UAAU,GAAG;AAACC,MAAAA,KAAK,EAAGH,YAAY,CAACC,OAAb,CAAqB,QAArB;AAAT,KAAnB;;AAEA,QAAI;AACA,UAAGC,UAAU,CAACC,KAAX,IAAmB,IAAtB,EAA2B;AACvBjB,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAACd,sBADA;AAELe,UAAAA,OAAO,EAAES;AAFJ,SAAD,CAAR;AAIH;AACJ,KAPD,CAQA,OAAOL,GAAP,EAAY;AACRX,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAACb;AADA,OAAD,CAAR;AAIH;AACJ,GAjBD,MAkBK;AACDO,IAAAA,QAAQ;AACX;AACJ,CAtBM;AAyBP,OAAO,MAAMkB,MAAM,GAAC,MAAOlB,QAAD,IAAc;AACpCA,EAAAA,QAAQ,CAAC;AACLM,IAAAA,IAAI,EAAEZ;AADD,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import { \n    LOGIN_SUCCESS,LOGIN_FAILED,SIGNUP_FAILED,SIGNUP_SUCCESS,AUTHENTICATION_SUCCESS,AUTHENTICATION_FAILED,LOGOUT_USER\n} from './actions.types'\nimport axios from 'axios'\n\nexport const login=(username,email,password) => async (dispatch) => {\n    const config = {\n        header: {\n            \"Content-Type\" : 'application/json'\n        }\n    };\n\n    const body = {username,email,password};\n\n    try {\n        const res = await axios.post(\n            \"api/userModel/login\",\n            body,\n            config\n        );\n    \n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data,\n        })\n        console.log(\"used logged in\")\n    }\n    catch (err) {\n        dispatch({\n            type:LOGIN_FAILED,\n        })\n    }\n}\n\nexport const signup  = (username,email,password) => async (dispatch) => {\n    const config = {\n        header: {\n            \"Content-Type\" : \"application/json\"\n        }\n    };\n\n    const body = { username,email,password};\n\n    try{\n        const res = await axios.post(\"api/userModel/register\",body,config);\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload:res.data,\n        });\n        console.log(\"user created\")\n\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAILED,\n        })\n    }\n    \n}\n\nexport const check_authenticated = () => async (dispatch) => {\n    if(localStorage.getItem('access')){\n        const tokenCheck = {token : localStorage.getItem('access')}\n\n        try {\n            if(tokenCheck.token !=null){\n                dispatch({\n                    type:AUTHENTICATION_SUCCESS,\n                    payload: tokenCheck,\n                })\n            }\n        }\n        catch (err) {\n            dispatch({\n                type:AUTHENTICATION_FAILED,\n\n            })\n        }\n    }\n    else {\n        dispatch\n    }\n}\n\n\nexport const logout=() => (dispatch) => {\n    dispatch({\n        type: LOGOUT_USER\n    })\n}"]},"metadata":{},"sourceType":"module"}